# import time
# import timeit
#
# start = time.time()
# b = [i for i in range(1000000)]
# delta = time.time() - start
# print(b)
# print(delta)
#
# x = 2 + 2
#
# print(timeit.timeit('b = [i for i in range(1000)]'))
#=====================================================================================================================

"""
Разбор ДЗ № 4
"""
# import random
# SIZE = 10
# array = [random.randint(-100, 100) for _ in range(SIZE)]
# print(array)
# i = 0
# index = -1
# while i < SIZE:
#     if array[i] < 0 and index == 1:
#         index = i
#     elif array[i] < 0 and array[i] > array[index]:
#         index = 1
#     i += 1
# print(f'Число {array[index]} на позиции {index}')
#=====================================================================================================================
"""
Преобразуем алгоритм указанный выше в функцию
"""
# import random
# import cProfile
#
# def max_below_zero(size):
#     # SIZE = 10
#     array = [random.randint(size * -10, size * 10) for _ in range(size)]
#     print(array)
#
#     i = 0
#     index = 1
#
#     while i < size:
#         if array[i] < 0 and index == 1:
#             index = i
#         elif array[i] < 0 and array[i] > array[index]:
#             index = i
#         i += 1
#     print(f'Число {array[index]} на позиции {index}')
#     return f'Число {array[index]} на позиции {index}'
#
#
# max_below_zero(10)
#=====================================================================================================================
import cProfile

# def prime(num):
#     count = 1
#     current_prime = 2
#
#     while count < num:
#         current_prime += 1
#         # for i in range(2, current_prime):
#         for i in range(2, int(current_prime ** 0.5) + 1):
#             if current_prime % i == 0:
#                 break
#         else:
#             count += 1
#
#     return current_prime


# def test_prime(func):
#     real_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
#                   103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
#                   211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
#                   331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
#                   449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
#                   587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
#                   709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
#                   853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
#                   991, 997, 1009, 1013]
#
#
#     for i, item in enumerate(real_prime, start = 1):
#         assert func(i) == item, f'Test {i}\t func {(i)} = {func(i)}'
#         print(f'Test {i} OK')
#
# test_prime(prime)
# print(prime(1023))
#=====================================================================================================================

import cProfile
import math

#Показывает частоту встречи числа в последовательности до определенного числа x
# pi_f = x / math.log(x)


# def prime(num):
#     pi_func = {4: 10,
#                25: 10 **2,
#                168: 10 **3,
#                1229: 10 ** 4,
#                9592: 10 ** 5,
#                78498: 10 ** 6,
#                664579: 10 ** 7,
#                5761455: 10 ** 8,
#               }
#     for key in pi_func.keys():
#         if num <= key:
#             size = pi_func[key]
#             break
#     else:
#         raise Exception('СДишком большой аргумент')
#
#     array = [i for i in range(size)]
#
#     array[1] = 0
#     for m in range(2, size):
#         if array[m] != 0:
#             j = m *2
#             j = m **2
#             while j < size:
#                 array[j] = 0
#                 j += m
#
#     res = [i for i in array if i != 0]
#     return res[num -1]
#
#
# def test_prime(func):
#     real_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
#                   103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
#                   211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
#                   331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
#                   449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
#                   587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
#                   709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
#                   853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
#                   991, 997, 1009, 1013]
#
#     for i, item in enumerate(real_prime, start=1):
#         assert func(i) == item, f'Test {i} fail\t func{(i)} = {func(i)}'
#         print(f'Test {i} OK')


# test_prime(prime)


"""
Оптимизированный вариант
"""


# def prime(num):
#     pi_func = {4: 10,
#                25: 10 **2,
#                168: 10 **3,
#                1229: 10 ** 4,
#                9592: 10 ** 5,
#                78498: 10 ** 6,
#                664579: 10 ** 7,
#                5761455: 10 ** 8,
#               }
#     for key in pi_func.keys():
#         if num <= key:
#             size = pi_func[key]
#             break
#
#     array = [True for _ in range(size)]
#     array[:2] = [False, False]
#     count = 0
#
#     for m in range(2, size):
#         if array[m]:
#             count += 1
#             if count == num:
#                 return m
#
#             for j in range(m **2, size, m):
#                 array[j] = False
#
#     return None # можно не писать, т.к. по умолчанию возвращает None
#
#
# def test_prime(func):
#     real_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
#                   103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
#                   211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
#                   331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
#                   449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
#                   587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
#                   709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
#                   853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
#                   991, 997, 1009, 1013]
#
#     for i, item in enumerate(real_prime, start=1):
#         assert func(i) == item, f'Test {i} fail\t func{(i)} = {func(i)}'
#         print(f'Test {i} OK')


# test_prime(prime)
#print(prime(1000))
# print(prime(5761455))
# cProfile.run('prime(10)')
# cProfile.run('prime(100)')
# cProfile.run('prime(1000)')
# cProfile.run('prime(2500)')
# cProfile.run('prime(5000)')
# cProfile.run('prime(10000)')

"""
Отдельно устанавливаемые модули для анализа кода
line_profile
memory_profile
"""
#=====================================================================================================================
#                                  ///////////////ОСНОВНАЯ ЛЕКЦИЯ\\\\\\\\\\\\\\\\\\\\\\\\\
"""
Коллекции - вообще любой набор данных, это коллекция. Содержит значения одного или разных типов
Позволяет обращаться к этим значениям, а также применять специальные методы и функции, зависящие 
от типа коллекции

Типы коллекций

1. ПОСЛЕДОВАТЕЛЬНОСТИ:
/индексированные элементы, не уникальны/
Изменяемые -> Список[list]
Неизменяемые -> Строка(string) и Кортеж(tuple)

2. МНОЖЕСТВА(Sets):
/Неиндексированные элементы, уникальны/
Изменяемые -> Множества[set]
Неизменяемые -> Неизменное множество(frozenset)

3. ОТОБРАЖЕНИЕ(Mapping):
/неиндексированный набор пар ключ:значение/

Словарь

"""






























