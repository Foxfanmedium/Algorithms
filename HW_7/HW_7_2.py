"""2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив, заданный случайными числами
на промежутке [0; 50). Выведите на экран исходный и отсортированный массивы.
Примечание:
Прочитать статью, решение достигает в 10 строчек кода"""
import random

array = [random.randint(0, 50) for _ in range(20)]
print(array)


def merge_sort(array):
    # print("Splitting ",array)
    if len(array) > 1:
        mid = len(array) // 2
        lefthalf = array[:mid]
        righthalf = array[mid:]

        merge_sort(lefthalf)
        merge_sort(righthalf)

        i = 0
        j = 0
        k = 0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                array[k] = lefthalf[i]
                i = i + 1
            else:
                array[k] = righthalf[j]
                j = j + 1
            k = k + 1
        while i < len(lefthalf):
            array[k] = lefthalf[i]
            i = i + 1
            k = k + 1
        while j < len(righthalf):
            array[k] = righthalf[j]
            j = j + 1
            k = k + 1
    # print("Merging ",array)


merge_sort(array)
print(array)

"""
Краткое описание метода слияния
Для решения задачи сортировки эти три этапа выглядят так:
1. Сортируемый массив разбивается на две части примерно одинакового размера;
2. Каждая из получившихся частей сортируется отдельно, например — тем же самым алгоритмом;
3. Два упорядоченных массива половинного размера соединяются в один.

Итог: 
Хорошо запрограммированная внутренняя сортировка слиянием работает немного быстрее пирамидальной, но медленнее быстрой, 
при этом требуя много памяти под буфер. Поэтому mergeSort используют для упорядочения массивов, лишь если требуется 
устойчивость метода(которой нет ни у быстрой, ни у пирамидальной сортировок).
Сортировка слиянием является одним из наиболее эффективных методов для односвязных списков и файлов, когда есть лишь 
последовательный доступ к элементам.

Сложность сортировки - (O(n \log n)\)
"""
